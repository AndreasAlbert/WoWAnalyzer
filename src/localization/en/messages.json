{
  "common.ability": "Ability",
  "common.cast": "Cast",
  "common.efficiency": "Efficiency",
  "common.health": "Health",
  "common.player": "Player",
  "common.stat.mana": "Mana",
  "common.target": "Target",
  "common.time": "Time",
  "deathknight.blood.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "deathknight.blood.suggestions.bloodPlague.uptime": "{0}% Blood Plague uptime",
  "deathknight.blood.suggestions.boneShield.stacksWasted": "{0}% wasted {1} stacks",
  "deathknight.blood.suggestions.boneShield.uptime": "{0}% Bone Shield uptime",
  "deathknight.blood.suggestions.boneStorm.notEnoughTargets": "{0}% casts hit {SUGGESTED_MIN_TARGETS_FOR_BONESTORM} or more targets",
  "deathknight.blood.suggestions.crimsonScourge.procsWasted": "{0}% Crimson Scourge procs wasted",
  "deathknight.blood.suggestions.dancingRuneWeapon.numberCasts": "{0} out of {1} casts during DRW were good",
  "deathknight.blood.suggestions.deathCaress.badCasts": "{0}% bad {1} casts",
  "deathknight.blood.suggestions.markOfBlood.uptime": "{0}% Mark Of Blood Uptime",
  "deathknight.blood.suggestions.ossuary.efficiency": "{0}% Ossuary efficiency",
  "deathknight.blood.suggestions.runicPower.wasted": "{0}% wasted",
  "deathknight.blood.suggestions.tomestone.badCasts": "{0}% bad Tombstone casts",
  "deathknight.forst.frostScythe.efficiency": "{0}% Frostscythe efficiency",
  "deathknight.frost.suggestions.alwaysBeCasting": "{0}% downtime",
  "deathknight.frost.suggestions.breathOfSindragosa.uptime": "You averaged {0} seconds of uptime per cast",
  "deathknight.frost.suggestions.frostFever.uptime": "{0}% Frost Fever uptime",
  "deathknight.frost.suggestions.killingMachine.wasted": "{0}% of Killing Machine procs were either refreshed and lost or expired without being used",
  "deathknight.frost.suggestions.rime.wastedProcs": "{0}% of Rime procs were either refreshed and lost or expired without being used",
  "deathknight.frost.suggestions.runicPower.wasted": "{0}% wasted",
  "deathknight.shared.suggestions.runes.overcapped": "{0}% runes overcapped",
  "deathknight.suggestions.hysteria.efficiency": "You wasted {0}% of RP from {1} by being RP capped.",
  "deathknight.suggestions.swarmingmist.efficiency": "You wasted {0}% of RP from {1} by being RP capped.",
  "deathknight.unholy.suggestions.alwaysBeCasting": "{0}% downtime",
  "deathknight.unholy.suggestions.apocalypse.efficiency": "An average {actual} of Festering Wounds were popped by Apocalypse",
  "deathknight.unholy.suggestions.festeringStrikes.efficiency": "{0}% of Festering Strikes did not risk overcapping Festering Wounds",
  "deathknight.unholy.suggestions.runicPower.wasted": "{0}% wasted",
  "deathknight.unholy.suggestions.scourgeStrike.efficiency": "{0}% of {1} were used with Wounds on the target",
  "deathknight.unholy.suggestions.virulentPlague.uptime": "{0}% Virulent Plague uptime",
  "demonhunter.havoc.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "demonhunter.havoc.suggestions.demonBlades.furyWasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.demonicAppetite.furyWasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.demonsBite.furyWasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.felBlade.furyWasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.fury.wasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.immolationAura.furyWasted": "{0}% Fury wasted",
  "demonhunter.havoc.suggestions.momentum.uptime": "{0}% buff uptime",
  "demonhunter.vengeance.spiritBombFrailtyBuff.uptime": "{0}% Frailty uptime",
  "demonhunter.vengeance.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "demonhunter.vengeance.suggestions.demonSpikes.unmitgatedHits": "{0}% unmitigated physical hits",
  "demonhunter.vengeance.suggestions.fury.wasted": "{0}% wasted",
  "demonhunter.vengeance.suggestions.soulBarrier.uptime": "{0}% Soul Barrier",
  "demonhunter.vengeance.suggestions.soulCleave.soulsConsumed": "{0}% of souls consumed.",
  "demonhunter.vengeance.suggestions.souls.wasted": "{0}% wasted Soul Fragments.",
  "demonhunter.vengeance.suggestions.spiritBomb.soulsConsumed": "{0}% of casts at 4+ souls.",
  "demonhunter.vengeance.suggestions.voidReaver.uptime": "{0}% Void Reaver uptime",
  "demonhunter.vengence.suggestions.shearfracture.wastedCasts": "{actual} bad casts",
  "druid.balance.suggestions.astralPower.overcapped": "{0}% overcapped Astral Power",
  "druid.balance.suggestions.castsCancelled": "{0}% casts cancelled",
  "druid.balance.suggestions.lunarStrike.efficiency": "{0} Unempowered Lunar Strikes per minute",
  "druid.balance.suggestions.moonfire.uptime": "{0}% Moonfire uptime",
  "druid.balance.suggestions.stellarFlare.uptime": "{0}% Stellar Flare uptime",
  "druid.balance.suggestions.sunfire.uptime": "{0}% Sunfire uptime",
  "druid.feral.suggestions.bloodtalons.efficiency": "{0} wasted charges of Bloodtalons per minute.",
  "druid.feral.suggestions.brutalSlash.hitcount.outOfRange": "{0} uses per minute that hit nothing.",
  "druid.feral.suggestions.comboPoints.wasted": "{0} combo points wasted per minute",
  "druid.feral.suggestions.energy.efficiency": "{0}% regenerated energy lost per minute due to being capped.",
  "druid.feral.suggestions.ferociousBite.efficiency": "{0}% average damage bonus from energy on Ferocious Bite.",
  "druid.feral.suggestions.finishers.efficiency": "{0}% of finishers were incorrectly used without full combo points",
  "druid.feral.suggestions.moonfire.uptime": "{0}% uptime",
  "druid.feral.suggestions.moonfireSnapshot.downgrades": "{0}% of Moonfire refreshes were early downgrades.",
  "druid.feral.suggestions.predator.efficiency": "{0} extra casts of Tiger's Fury per minute.",
  "druid.feral.suggestions.rake.uptime": "{0}% uptime",
  "druid.feral.suggestions.rakeSnapshot.earlyRefresh": "{0}% of Rake refreshes were early downgrades.",
  "druid.feral.suggestions.rakeSnapshot.prowlBuffed": "{0} seconds of Prowl buffed Rake was lost per minute.",
  "druid.feral.suggestions.rip.uptime": "{0}% uptime",
  "druid.feral.suggestions.ripSnapshot.earlyRefresh": "{0} Rip refresh{1} were early downgrades.",
  "druid.feral.suggestions.ripSnapshot.reducedDuration": "Rip's duration reduced {0} time{1}.",
  "druid.feral.suggestions.ripSnapshot.shouldBeBite": "{0} Rip cast{1} could have been replaced with Bite.",
  "druid.feral.suggestions.savageRoar.uptime": "{0}% uptime",
  "druid.feral.suggestions.swipe.hitcount.efficiency": "{0} uses per minute that hit just one target.",
  "druid.feral.suggestions.swipe.hitcount.outOfRange": "{0} uses per minute that hit nothing.",
  "druid.feral.suggestions.thrash.hitcount.outOfRange": "{0} uses per minute that hit nothing.",
  "druid.feral.suggestions.tigerFuryEnergy.energyWasted": "{0}% of generated energy wasted.",
  "druid.feral.suggetions.shadowmeld.efficiency": "{0}% cast efficiency.",
  "druid.feral.suggetions.shadowmeld.wasted": "{0} cast{1} when already stealthed.",
  "druid.guardian.suggestions.earthwarden.efficiency": "{0}% of potential damage was mitigated by Earthwarden",
  "druid.guardian.suggestions.earthwarden.notOptimal": "{0}% of total damage is melee attacks",
  "druid.guardian.suggestions.fillerSpells.efficiency": "{0}% unnecessary filler spells cast",
  "druid.guardian.suggestions.frenziedRegeneration.efficiency": "{0}% of casts had a predicted heal of less than {1}% and were cast above {2}% HP",
  "druid.guardian.suggestions.galacticGuardian.unused": "{0}% unused",
  "druid.guardian.suggestions.gore.unused": "{0}% unused",
  "druid.guardian.suggestions.guardianOfElune.unused": "{0}% unused",
  "druid.guardian.suggestions.ironfur.uptime": "{0}% was mitigated by Ironfur",
  "druid.guardian.suggestions.moonfire.uptime": "{0}% uptime",
  "druid.guardian.suggestions.pulverize.uptime": "{0}% uptime",
  "druid.guardian.suggestions.rage.wasted": "{0}% wasted rage",
  "druid.guardian.suggestions.thrash.uptime": "{0}% uptime",
  "druid.resto.suggestions.innervate.avgManaSaved": "average mana saved per Innervate cast",
  "druid.resto.suggestions.innervate.selfCasts": "time(s) you casted innervate on yourself",
  "druid.restoration.efflorescence.uptime": "{0}% uptime",
  "druid.restoration.suggestions.clearcasting.efficiency": "You cast {0} Regrowths per minute without a Clearcasting proc.",
  "druid.restoration.suggestions.clearcasting.wastedProcs": "You missed {0} out of {1} ({2}%) of your free regrowth procs",
  "druid.restoration.suggestions.cultivation.notOptimal": "{0}% healing",
  "druid.restoration.suggestions.flourish.cenarionWardExtended": "{0}/{1} CWs extended.",
  "druid.restoration.suggestions.flourish.wildGrowthExtended": "{0}% WGs extended.",
  "druid.restoration.suggestions.lifebloom.uptime": "{0}% uptime",
  "druid.restoration.suggestions.rejuvenation.wastedSeconds": "You refreshed early {0} times which made you waste {1} seconds of rejuvenation.",
  "druid.restoration.suggestions.soulOfTheForest.efficiency": "Wild growth consumed {0}% of all the buffs.",
  "druid.restoration.suggestions.springBlossoms.efficiency": "{0}% healing",
  "druid.restoration.suggestions.treeOfLife.efficiency": "{0}% healing",
  "druid.restoration.suggestions.wildgrowth.overhealing": "{0}% of casts with high overhealing.",
  "druid.restoration.suggestions.wildgrowth.rejuvenationRatio": "{0} WGs / {1} rejuvs",
  "druid.restoration.suggestions.wildgrowth.tooFewTargets": "{0}% of your casts on fewer than {RECOMMENDED_HIT_THRESHOLD} targets.",
  "hunter.beastmastery.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.beastmastery.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.petBuff.recommended": "{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.petBuff.uptime": "Your pet had the buff from Barbed Shot for {0}% of the fight",
  "hunter.beastmastery.suggestions.barbedShot.threeStacks.recommended": "{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.threeStacks.uptime": "Your pet had 3 stacks of the buff from Barbed Shot for {0}% of the fight",
  "hunter.beastmastery.suggestions.beastCleave.efficiency": "{actual} {0} without any Beast Cleave damage",
  "hunter.beastmastery.suggestions.beastCleave.recommended": "{recommended} is recommended",
  "hunter.beastmastery.suggestions.bestialWrath.cooldown.efficiency": "You had {0}% effective cooldown reduction of Bestial Wrath",
  "hunter.beastmastery.suggestions.bestialWrath.cooldown.recommended": ">{0}% is recommended",
  "hunter.beastmastery.suggestions.bestialWrath.focusPool.efficiency": "Average of {0} focus at start of Bestial Wrath",
  "hunter.beastmastery.suggestions.bestialWrath.focusPool.recommended": ">{recommended} focus is recommended",
  "hunter.beastmastery.suggestions.cobraShot.cooldown.recommended": "0 inefficient casts is recommended",
  "hunter.beastmastery.suggestions.cobraShot.cooldown.wasted": "You cast {actual} Cobra Shots when Kill Command wasn't on cooldown",
  "hunter.beastmastery.suggestions.cobraShot.efficiency": "You had {0}% effective cooldown reduction of Kill Command",
  "hunter.beastmastery.suggestions.cobraShot.recommended": ">{0}% is recommended",
  "hunter.beastmastery.suggestions.items.qapla.actual": "You had {0}% effective cooldown reduction of Kill Command",
  "hunter.beastmastery.suggestions.items.qapla.recommended": ">{0}% is recommended",
  "hunter.beastmastery.suggestions.killerCobra.efficiency": "You cast Cobra Shot while Kill Command wasn't on cooldown, whilst Bestial Wrath was up {actual} times.",
  "hunter.beastmastery.suggestions.killerCobra.recommended": "{recommended} is recommended.",
  "hunter.beastmastery.suggestions.petBasicAttacks.actual": "Your pet didn't cast any Basic Attacks this fight",
  "hunter.beastmastery.suggestions.petBasicAttacks.suggestions": "Your pet should be autocast Basic Attacks",
  "hunter.beastmastery.suggestions.stampede.efficiency": "{actual} inefficient {0}",
  "hunter.beastmastery.suggestions.stampede.recommended": "{recommended} is recommended",
  "hunter.marksmanship.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.marksmanship.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.marksmanship.suggestions.callingTheShots.efficiency": "You had {0}% effective cooldown reduction from Calling the Shots",
  "hunter.marksmanship.suggestions.castsCanceled.efficiency": "{0}% casts cancelled",
  "hunter.marksmanship.suggestions.focusCapTracker.focusLost": "{0}% regenerated focus lost due to being capped.",
  "hunter.marksmanship.suggestions.lethalShots.efficiency": "{actual} Lethal Shot trigger casts while Rapid Fire wasn't on cooldown",
  "hunter.marksmanship.suggestions.serpentSting.refreshOutsidePandemic": "You refreshed Serpent Sting {actual} times when it wasn't in the pandemic window",
  "hunter.marksmanship.suggestions.serpentSting.uptime": "You had an uptime of {0}%",
  "hunter.marksmanship.suggestions.steadyFocus.uptime": "{0}% uptime",
  "hunter.shared.suggestions.barrage.efficiency": "{actual} inefficient {0}",
  "hunter.survival.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.survival.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.survival.suggestions.birdOfPrey.efficiency": "{0}% of abilities extending CA were used on your pets target",
  "hunter.survival.suggestions.butcheryCarve.averageTargets": "{actual} average targets hit per cast",
  "hunter.survival.suggestions.mongooseBite.focusWindow": "{0} average focus on new window.",
  "hunter.survival.suggestions.serpentSting.pandemicWindow": "{0}% Serpent Sting uptime",
  "hunter.survival.suggestions.serpentSting.tooEarly": "{actual} Serpent Sting cast(s) were cast too early",
  "hunter.survival.suggestions.serpentSting.uptime": "{0}% Serpent Sting uptime",
  "hunter.survival.suggestions.wildfireBomb.pandemic.efficiency": "{actual} casts unnecessarily refreshed WFB",
  "hunter.survival.suggestions.wildfireBomb.uptime": "{0}% uptime",
  "hunter.survival.suggestions.wildfireInfusion.castsWithoutSerpentSting": "{actual} casts without {0} on",
  "hunter.survival.suggetsions.mongooseBite.maxStacksCasts": "{0}% casts on max stacks.",
  "mage.arcane.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.arcane.suggestions.arcaneEcho.badTouchUses": "{0} Bad Touch of the Magi Uses`",
  "mage.arcane.suggestions.arcaneFamiliar.uptime": "{0}% Uptime",
  "mage.arcane.suggestions.arcaneMana.manaLeft": "{0}% (${1} mana left",
  "mage.arcane.suggestions.arcaneMissiles.clearCasting.uptime": "{0}% Uptime",
  "mage.arcane.suggestions.arcaneOrb.badCasts": "{0} Missed Orbs",
  "mage.arcane.suggestions.arcanePower.badCasts": "{0} Bad Casts",
  "mage.arcane.suggestions.arcanePower.lowMana": "{0}% Utilization",
  "mage.arcane.suggestions.arcanePower.utilization": "{0}% Utilization",
  "mage.arcane.suggestions.ruleOfThrees.utilization": "{0}% Utilization",
  "mage.arcane.suggestions.timeAnomaly.utilization": "{0}% Utilization",
  "mage.fire.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.fire.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "mage.fire.suggestions.combustion.castsPerCombustion": "{0} Casts Per Combustion",
  "mage.fire.suggestions.combustion.charge.utilization": "{0} Casts Per Combustion",
  "mage.fire.suggestions.combustionCharges.flameOn.utilization": "{0}% Utilization",
  "mage.fire.suggestions.combustionCharges.phoenixFlames.utilization": "{0}% Utilization",
  "mage.fire.suggestions.heatingUp.fireBlastUtilization": "{0}% Utilization",
  "mage.fire.suggestions.heatingUp.phoenixFlames.utilization": "{0}% Utilization",
  "mage.fire.suggestions.hostStreak.precasts.utilization": "{0}% Utilization",
  "mage.fire.suggestions.hotStreak.expired": "{0}% expired",
  "mage.fire.suggestions.hotStreak.wastedCrits": "{0} crits wasted",
  "mage.fire.suggestions.infernalCascade.maxStackPercent": "{0}% utilization",
  "mage.fire.suggestions.meteor.combustion.utilization": "{0}% Utilization",
  "mage.fire.suggestions.meteor.efficiency": "{0}% Utilization",
  "mage.fire.suggestions.meteor.runeOfPower.utilization": "{0}% Utilization`",
  "mage.fire.suggestions.phoenixFlames.phoenixFlamesCappedCharges": "{0}% of fight capped on charges",
  "mage.fire.suggestions.pyroclasm.wastedProcs": "{0}% utilization",
  "mage.fire.suggestions.searingTouch.executeCasts": "{0}% Utilization",
  "mage.fire.suggestions.searingTouch.nonExecuteScorchCasts": "{0}% Utilization",
  "mage.fire.suggestions.shiftingPowerUsage.usagePercent": "{0}% utilization",
  "mage.frost.alwaysBeCasting.statistic.label": "Active time",
  "mage.frost.alwaysBeCasting.statistic.tooltip": "Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<0/><1><2>You spent <3>{0}%</3> of your time casting something.</2><4>You spent <5>{1}%</5> of your time casting nothing at all.</4></1>",
  "mage.frost.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.frost.suggestions.arcanePower.arcanePowerActiveTime": "{0}% Active Time during Arcane Power",
  "mage.frost.suggestions.brainFreeze.casts": "{0} casts",
  "mage.frost.suggestions.brainFreeze.expired": "{0}% expired",
  "mage.frost.suggestions.brainFreeze.overwritten": "{0}% overwritten",
  "mage.frost.suggestions.combustion.combustionActiveTime": "{0}% Active Time during Combustion",
  "mage.frost.suggestions.frostElemental.utilization": "{0}",
  "mage.frost.suggestions.glacialSpike.castsWithoutShatter": "{0}% utilization",
  "mage.frost.suggestions.iceLance.nonShatterCasts": "{0}% missed",
  "mage.frost.suggestions.icyVeins.icyVeinsActiveTime": "{0}% Active Time during Icy Veins",
  "mage.frost.suggestions.waterElemental.uptime": "{0}% uptime",
  "mage.frost.suggestions.wintersChill.notShattered": "{0}% Winter's Chill not shattered with Frostbolt, Glacial Spike, or Ebonbolt",
  "mage.frost.suggestions.wintersChill.notShatteredIceLance": "{0}% Winter's Chill not shattered with Ice Lance",
  "mage.shared.suggestions.arcaneIntellect.uptime": "{0}% Uptime",
  "mage.shared.suggestions.castsCancelled": "{0}% casts cancelled",
  "mage.shared.suggestions.focusMagic.uptime": "{0}% Focus Magic Uptime",
  "mage.shared.suggestions.runeOfPower.utilization": "Average ${0}s standing in each Rune of Power",
  "monk.brewmaster.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.brewmaster.suggestions.blackOxBrew.cdrWasted": "{0}% of Cooldown Reduction wasted",
  "monk.brewmaster.suggestions.blackoutCombo.wasted": "{0}% unused",
  "monk.brewmaster.suggestions.breathOfFire.hitsMitigated": "{0}% of hits mitigated with Breath of Fire",
  "monk.brewmaster.suggestions.purifyingBrew.avgdelay": "{0}s Average Delay",
  "monk.brewmaster.suggestions.rushingJadeWind.uptime": "{0}% uptime",
  "monk.mistweaver.jadeSerpentStatue.uptime": "% uptime",
  "monk.mistweaver.modules.features.statValues.hpct": "HPCT stands for \"Healing per Cast Time\". This is the max value that Haste would be worth if you would cast everything you are already casting (that scales with Haste) faster. Mana and overhealing are not accounted for in any way.<0/><1/>The real value of Haste (HPCT) will be between 0 and the shown value. It depends on various things, such as if you have the mana left to spend, if the gained casts would overheal, and how well you are at casting spells end-to-end. If you are going OOM before the end of the fight you might instead want to drop some Haste or cast fewer bad heals. If you had mana left-over, Haste could help you convert that into healing. If your Haste usage is optimal Haste will then be worth the shown max value.<2/><3/>Haste can also help you safe lives during intense damage phases. If you notice you're GCD capped when people are dying, Haste might help you land more heals. This may contribute more towards actually getting the kill.",
  "monk.mistweaver.modules.talents.invokeChiJi.breakdown": "Healing Breakdown:<0><1>{0} healing from Chi-Ji Gust of Mist.</1><2>{1} healing from Enveloping Breath.</2></0>Stack Breakdown:<3><4>{2} free Enveloping Mist cast(s).</4><5>{3} Enveloping Mist cast(s) below max ({MAX_STACKS}) Chi-Ji stacks.</5><6>{4} stack(s) wasted from overcapping Chi-Ji stacks.</6></3>Activity:<7><8>{5} average gcds inside Chi-Ji window</8></7>",
  "monk.mistweaver.modules.talents.invokeChiJi.missedGCDs": "{0} missed GCDs",
  "monk.mistweaver.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.mistweaver.suggestions.alwaysBeCasting.nonHealing": "{0}% non healing time",
  "monk.mistweaver.suggestions.chiBurst.targetsHit": "targets hit per Chi Burst cast -",
  "monk.mistweaver.suggestions.chiBurst.targetsHitPartTwo": "% of raid hit",
  "monk.mistweaver.suggestions.envelopingBreath.averageEnvBPerEnv": "Enveloping Breaths per Enveloping Mist during Celestial",
  "monk.mistweaver.suggestions.essenceFont.averageTargetsHit": "average targets hit per cast",
  "monk.mistweaver.suggestions.essenceFontMastery.averageHots": "{0} average EF HoTs",
  "monk.mistweaver.suggestions.lifecycles.manaSaved": "mana saved through Lifecycles",
  "monk.mistweaver.suggestions.manaTea.avgManaSaved": "average mana saved per Mana Tea cast",
  "monk.mistweaver.suggestions.manaTea.avgOverHealing": "% average overhealing per Mana Tea cast",
  "monk.mistweaver.suggestions.refreshingJadeWind.avgTargetsHit": "% of targets hit per Refreshing Jade Wind",
  "monk.mistweaver.suggestions.renewingMistDuringManaTea.avgRenewingMists": "average Renewing Mists during Mana Tea",
  "monk.mistweaver.suggestions.soothingMist.channelingWithoutCastingSpells": "% of Soothing Mist casts with max spells casted",
  "monk.mistweaver.suggestions.spinningCraneKick.efficiency": "Spinning Crane Kicks that hit fewer than 3 enemies",
  "monk.mistweaver.suggestions.spiritOfTheCrane.manaReturned": "mana returned through Spirit of the Crane",
  "monk.mistweaver.suggestions.thunderFocusTea.incorrectCasts": "incorrect casts with Thunder Focus Tea",
  "monk.mistweaver.suggestions.tier45Talent.efficiency": "mana returned through",
  "monk.mistweaver.suggestions.vivify.renewingMistsPerVivify": "Renewing Mists per Vivify",
  "monk.windwalker.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.windwalker.comboStrikes.masteryBreaksPerMinute": "{0} mastery breaks per minute.",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks": "Your average number of <0/> stacks used when you cast <1/> was low",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks.actual": "{0} average stacks used",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks.recommended": "Try to cast Crackling Jade Lightning while as close to 20 stacks as possible",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.tooltip": "Damage dealt does not account for opportunity cost<0/>Stacks generated <1>{0}</1><2/>Stacks consumed: <3>{1}</3><4/>Stacks wasted by generating at cap: <5>{2}</5><6/>Average stacks spent on each cast: <7>{3}</7>",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks": "You wasted your <0/> stacks by using chi spenders while at 20 stacks",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks.actual": "{0} Wasted stacks per minute",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks.recommended": "{recommended} Wasted stacks per minute is recommended",
  "monk.windwalker.suggestions.blackoutKick.cdrWasted": "{0} seconds of wasted cooldown reduction per minute",
  "monk.windwalker.suggestions.chi.wastedPerMinute": "{0} Chi wasted ({1} per minute)",
  "monk.windwalker.suggestions.comboBreaker.procsUsed": "{0}% used Combo Breaker procs",
  "monk.windwalker.suggestions.fistOfFury.avgTicksPerCast": "{0} average ticks on each Fists of Fury cast",
  "monk.windwalker.suggestions.hitCombo.uptime": "{0} % uptime",
  "monk.windwalker.suggestions.jadeIgnitionWastedStacks": "You wasted your <0/> stacks by using Fists of Fury at full stacks",
  "monk.windwalker.suggestions.touchOfKarma.absorbUsed": "{0}% Touch of Karma absorb used",
  "priest.discipline.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.discipline.suggestions.purgeTheWicked.uptime": "{0}% uptime",
  "priest.discipline.suggestions.schism.efficiency": "You cast Schism {actual} times without pairing it with strong damaging abilities, such as Penance, Halo, or Power Word: Solace.",
  "priest.discipline.suggestions.twistOfFate.efficiency": "{0}% of total healing",
  "priest.holy.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.holy.suggestions.divineHymn.wastedTicks": "{actual} missed Hymn ticks",
  "priest.holy.suggestions.fortitudeRaidBuff.uptime": "{0}% Power Word: Fortitude uptime",
  "priest.holy.suggestions.spiritOfRedemption.efficiency": "{actual} seconds spent redeeming",
  "priest.shadow.conduits.dissonantEchoes.efficiency": "You wasted {0} out of {1} Dissonant Echoes procs.",
  "priest.shadow.conduits.dissonantEchoes.tooltip": "You used {0} out of the {1} procs gained.",
  "priest.shadow.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.shadow.suggestions.darkThoughts.efficiency": "You wasted {0} out of {1} Dark Thought procs.",
  "priest.shadow.suggestions.deathAndMadness.efficiency": "Reset {0}% of Shadow Word: Death casts. If you're not getting enough resets from Death and Madness, you'll likely benefit more from using a different talent.",
  "priest.shadow.suggestions.dispersion.uptime": "{0}% Dispersion uptime",
  "priest.shadow.suggestions.insanity.usage": "You wasted {0}% of your Insanity due to overcapping.",
  "priest.shadow.suggestions.shadowWordPain.uptime": "{0}% Shadow Word: Pain uptime",
  "priest.shadow.suggestions.unfurlingDarkness.efficiency": "Wasted {0}% of Unfurling Darkness procs. If you're not getting enough uses from Unfurling Darkness, you'll likely benefit more from using a different talent.",
  "priest.shadow.suggestions.vampiricTouch.uptime": "{0}% Vampiric Touch uptime",
  "priest.shadow.suggestions.voidTorrent.secondsLost": "Lost {0} seconds of Void Torrent.",
  "priest.shared.suggestions.DesperatePrayer.efficiency": "You died {0} time(s) with Desperate Prayer available.",
  "rogue.assassination.suggestions.blindside.efficiency": "You used Mutilate {0} times when Blindside was available",
  "rogue.assassination.suggestions.garrote.uptime": "{0}% Garrote uptime",
  "rogue.assassination.suggestions.masterAssassin.efficiency": "{0}% good casts during Master Assassin",
  "rogue.assassination.suggestions.nightstalker.snapshots": "{0}% of Vanishes used to snapshot Rupture",
  "rogue.assassination.suggestions.rupture.uptime": "{0}% Rupture uptime",
  "rogue.assassination.suggestions.snapshot.timeLost": "{0}% snapshot time lost",
  "rogue.assassinations.suggestions.subterfuge.efficiency": "{0}% of Subterfuges with atleast one Garrote cast",
  "rogue.outlaw.dispatch.efficiency": "{0}% inefficient casts",
  "rogue.outlaw.suggestions.betweentheEyes.timeoffCD": "{0}% time spent on cooldown",
  "rogue.outlaw.suggestions.opportunity.efficiency": "{0}% inefficient casts",
  "rogue.outlaw.suggestions.rollTheBones.efficiency": "{0}% ({1} out of {2}) efficient rerolls",
  "rogue.outlaw.suggestions.rollTheBones.uptime": "{0}% Roll the Bones uptime",
  "rogue.shared.suggestions.energy.capped": "{0} regenerated energy lost per minute due to being capped.",
  "rogue.shared.suggestions.finishers.efficiency": "{0}% ({1} out of {2}) inefficient casts",
  "rogue.subtlety.suggestions.castsInStealth.casts": "{actual} {0} casts",
  "rogue.subtlety.suggestions.castsInStealth.efficiency": "{0} casts out of {1} possible.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.actual": "You cast Vanish {0} times with more than {1}s left on Find Weakness on the current target.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.recommended": "Do not cast Vanish with more than {0}s left on Find Weakness on the current target.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.suggestion": "Avoid casting Vanish with more than {0}s left on Find Weakness on the current target.",
  "shaman.elemental.suggestions.castsCancelled": "{0}% casts cancelled",
  "shaman.elemental.suggestions.flameShock.efficiency": "{0} Lava Burst casts without Flame Shock DOT",
  "shaman.elemental.suggestions.flameShock.uptime": "{0}% uptime",
  "shaman.elemental.suggestions.primalFireElemental.meteorCastsMissed": "{0} missed Meteor Casts.",
  "shaman.elemental.suggestions.primalFireElemental.unusedSpells": "{0} spell/-s not used by your Fire Elemental ({unusedSpellsString})",
  "shaman.elemental.suggestions.stormElemental.badCasts": "{actual} other casts with Storm Elemental up",
  "shaman.elemental.suggestions.surgeOfPower.stormKeeperEmpowered": "{0}% of Stormkeeper Lightning Bolts empowered with Surge",
  "shaman.enhancement.modules.core.flametongue.actual": "{0}% uptime",
  "shaman.enhancement.modules.core.flametongue.recommended": "{0}% is recommended",
  "shaman.enhancement.modules.core.flametongue.suggestion": "Your Flametongue uptime of {0}% is below 95%, try to get as close to 100% as possible",
  "shaman.enhancement.modules.core.flametongueRefresh.actual": "{actual} of {0} ({1}%) early refreshes",
  "shaman.enhancement.modules.core.flametongueRefresh.recommended": "{recommended} recommended",
  "shaman.enhancement.modules.core.flametongueRefresh.suggestion": "Avoid refreshing Flametongue with more then 4.5 sec left on the buff. Some early refreshes are unavoidable.",
  "shaman.enhancement.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "shaman.restoration.abilities.buffedByTidalWave": "Tidal Waved {0}",
  "shaman.restoration.apt.statistic.label": "Ancestral Protection Totem",
  "shaman.restoration.apt.statistic.label.failure": "No Results",
  "shaman.restoration.apt.statistic.label.success": "{0} events found",
  "shaman.restoration.apt.statistic.tooltip.active": "This includes the APT casts of all Restoration Shamans in the fight.",
  "shaman.restoration.apt.statistic.tooltip.inactive": "Click to analyze APT usage on this fight.",
  "shaman.restoration.apt.status.res": "Resurrected",
  "shaman.restoration.apt.status.revivable": "Able to revive",
  "shaman.restoration.apt.status.totemPlaced": "Totem placed",
  "shaman.restoration.av.statistic.disabled": "Module disabled",
  "shaman.restoration.av.statistic.disabled.reason": "There were multiple Restoration Shamans with Ancestral Vigor in your raid group, this causes major issues with buff tracking. As the results from this module would be very inaccurate, it was disabled.",
  "shaman.restoration.av.statistic.label": "Lives saved",
  "shaman.restoration.av.statistic.tooltip.active": "The amount of players that would have died without your Ancestral Vigor buff.",
  "shaman.restoration.av.statistic.tooltip.inactive": "Click to analyze how many lives were saved by the ancestral vigor buff.",
  "shaman.restoration.castBehaviour.statistic.fillers": "Fillers",
  "shaman.restoration.castBehaviour.statistic.tidalWaves": "<0/> usage",
  "shaman.restoration.castBehaviour.unusedTW": "Unused Tidal Waves",
  "shaman.restoration.castBehaviour.unusedTW.tooltip": "The amount of Tidal Waves you did not use out of the total available. You cast {riptideCasts} Riptides and {chainHealCasts} Chain Heals which gave you {totalTwGenerated} Tidal Waves charges, of which you used ${totalTwUsed}.",
  "shaman.restoration.chainHeal.averageTargets": "Average Chain Heal targets",
  "shaman.restoration.chainHeal.averageTargets.title": "Below are the casts that only hit the initial target. A large list indicates that target selection is an area for improvement.",
  "shaman.restoration.chainHeal.averageTargets.tooltip": "The average number of targets healed by Chain Heal out of the maximum amount of targets. You cast a total of {0} Chain Heals, which healed an average of {1} out of {2} targets.",
  "shaman.restoration.checklist.aoeSpell": "Target AOE spells effectively",
  "shaman.restoration.checklist.aoeSpell.description": "As a resto shaman our core AOE spells rely on not just who we target but where they are on the ground to maximize healing potential. You should plan you AOE spells ahead of time in preparation for where you expect raid members to be for the spells duration.",
  "shaman.restoration.checklist.aoeSpell.efficiency": "Average <0/> efficiency",
  "shaman.restoration.checklist.aoeSpell.targets": "Average <0/> targets",
  "shaman.restoration.checklist.appliedPrepull": "<0/> applied prepull",
  "shaman.restoration.checklist.buffUptime": "Keep your buffs up",
  "shaman.restoration.checklist.buffUptime.description": "Water Shield and Earth Shield should be applied prior to the fight starting and maintained.<0/>It is currently not possible to detect if you applied Water Shield before the pull or how good its uptime was, so just keep that in mind.",
  "shaman.restoration.checklist.cooldownUsage": "Use cooldowns effectively",
  "shaman.restoration.checklist.cooldownUsage.description": "Your cooldowns are an important contributor to your healing throughput. Try to get in as many efficient casts as the fight allows.<0>More info.</0>",
  "shaman.restoration.checklist.efficientSpells": "Use core efficient spells as often as possible",
  "shaman.restoration.checklist.efficientSpells.description": "Spells such as <0/>, <1/> and <2/> are your most efficient spells available. Try to cast them as much as possible without overhealing. <3>On Mythic*</3> you can often still cast these spells more even if you were overhealing by casting it quicker when it comes off cooldown and improving your target selection.<4>More info.</4>",
  "shaman.restoration.checklist.efficientSpells.description.tooltip": "When you're not bringing too many healers.",
  "shaman.restoration.checklist.inactivity": "Try to avoid being inactive for a large portion of the fight",
  "shaman.restoration.checklist.inactivity.description": "While it's suboptimal to always be casting as a healer you should still try to always be doing something during the entire fight and high downtime is inexcusable. You can reduce your downtime by reducing the delay between casting spells, anticipating movement, moving during the GCD, and <0>when you're not healing try to contribute some damage*</0>.",
  "shaman.restoration.checklist.inactivity.description.tooltip": "While helping with damage would be optimal, it's much less important as a healer than any of the other suggestions on this checklist. You should ignore this suggestion while you are having difficulties with anything else.",
  "shaman.restoration.checklist.inactivity.downtime": "Downtime",
  "shaman.restoration.checklist.inactivity.nonHealTime": "Non healing time",
  "shaman.restoration.checklist.manaUsage": "Use all of your <0/> effectively",
  "shaman.restoration.checklist.manaUsage.description": "If you have a large amount of mana left at the end of the fight that's mana you could have turned into healing. Try to use all your mana during a fight. A good rule of thumb is to try to match your mana level with the boss's health.",
  "shaman.restoration.checklist.manaUsage.manaLeft": "Mana left",
  "shaman.restoration.checklist.uptime": "<0/> Uptime",
  "shaman.restoration.config.description": "Welcome to the Resto Shaman analyzer! We hope you find these suggestions and statistics useful.<0/><1/>If you want to learn more about Resto Shaman, join the Resto Shaman community at the <2>Ancestral Guidance</2> discord server and make sure to visit the guides on <3>Wowhead</3> and <4>Icy Veins</4>.<5/><6/><7>If there is something missing, incorrect, or inaccurate, please report it on <8>GitHub</8> or contact us on <9>Discord</9>.</7>",
  "shaman.restoration.downpour.statistic.label": "Average Downpour cooldown",
  "shaman.restoration.downpour.statistic.label.tooltip": "You cast a total of {downpourCasts} Downpours, which on average hit {0} out of 6 targets. <0/>Of those hits, {1} had effective healing and increased the cooldown.",
  "shaman.restoration.downpour.statistic.value": "{0} seconds",
  "shaman.restoration.ewt.statistic.label": "Earthen Wall Totem efficiency",
  "shaman.restoration.ewt.statistic.tooltip": "The percentage of the potential absorb of Earthen Wall Totem that was actually used. You cast a total of {casts} Earthen Wall Totems with a combined health of {0}, which absorbed a total of {1} damage.<0/><1/>This can be higher than 100% because it sometimes absorbs a few more damage hits before the totem realizes it is supposed to be dead already.<2/><3/><4>Pet healing is filtered out.</4>",
  "shaman.restoration.ewt.statisticlist.tooltip": "Pet healing is filtered out",
  "shaman.restoration.ewt.suggestion.label": "Try to cast <0/> at times - and positions where there will be as many people taking damage possible inside of it to maximize the amount it absorbs.",
  "shaman.restoration.flashFlood.statistic.description": "{0} seconds",
  "shaman.restoration.flashFlood.statistic.description.tooltip": "Cast time saved by Flash Flood. <0/>{0} seconds 'saved' on reductions below GCD.",
  "shaman.restoration.flashFlood.statistic.label": "<0/> usage",
  "shaman.restoration.flashFlood.statistic.title": "Total Cast Time Saved",
  "shaman.restoration.healingEfficiencyDetails": "<0/> mana gained is removed from the spell, meaning the mana spent of that spell will be lower.<1/>Healing that is caused by the <2/> buff, is added to <3/> instead of the spell that was buffed.<4/><5/> is given the healing from its healing buff and is removed from the spells that were buffed.",
  "shaman.restoration.healingEfficiencyDetails2": "<0/> is given the healing from its created <1/> & <2/> and is removed from those spells.",
  "shaman.restoration.healingRain.averageTargets.label": "Average Healing Rain Targets",
  "shaman.restoration.healingRain.averageTargets.label.tooltip": "The average number of targets healed by Healing Rain out of the maximum amount of 6 targets.",
  "shaman.restoration.healingWave.inefficientCast.reason": "Riptide was off cooldown when you started casting this unbuffed Healing Wave. Casting Riptide into Healing Wave to generate and use a Tidal Wave stack, or using a Flash Flood buff (if talented) is a lot more efficient compared to casting a full-length Healing Wave.",
  "shaman.restoration.highTide.statistic.tooltip": "{0} High Tide buff stacks used out of {1}.",
  "shaman.restoration.legendaries.primalTideCore.statistic.tooltip": "{0} Riptide applications",
  "shaman.restoration.legendaries.primalTideCore.statistic.tooltip2": "{0}% Overhealing",
  "shaman.restoration.manaTideTotem.statistic.healerManaRestored": "Mana restored (all Healers)",
  "shaman.restoration.manaTideTotem.statistic.manaRestored": "Mana restored",
  "shaman.restoration.masteryEffectiveness.statistic.label": "Mastery benefit",
  "shaman.restoration.masteryEffectiveness.statistic.panel": "Mastery effectiveness breakdown",
  "shaman.restoration.masteryEffectiveness.statistic.tooltip": "The percent of your mastery that you benefited from on average (so always between 0% and 100%). Since you have {0}% mastery, this means that on average your heals were increased by {1}% by your mastery.",
  "shaman.restoration.resurgence.statistic.label": "Mana gained from Resurgence",
  "shaman.restoration.resurgence.statistic.table.description": "<0/> accounted for {0}% of your mana pool ({1} mana).",
  "shaman.restoration.resurgence.statistic.tableHeader.amount": "Amount",
  "shaman.restoration.resurgence.statistic.tableHeader.crits": "Crits",
  "shaman.restoration.resurgence.statistic.tableHeader.mana": "% of mana",
  "shaman.restoration.resurgence.statistic.tableHeader.spell": "Spell",
  "shaman.restoration.slt.statistic.label": "Damage reduction",
  "shaman.restoration.slt.statistic.tooltip": "The total estimated damage reduced during Spirit Link was {0} ({1} DRPS). This has a 99% accuracy.<0/><1/>This value is calculated using the <2>Optional DRs</2> method. This results in the lowest possible damage reduction value being shown. This should be the correct value in most circumstances. Health redistribution is not part of this calculated value.",
  "shaman.restoration.slt.statistic.value": "≈{0} DRPS",
  "shaman.restoration.spell.chainHeal": "Chain Heal",
  "shaman.restoration.spell.healingRain": "Healing Rain",
  "shaman.restoration.spell.healingSurge": "Healing Surge",
  "shaman.restoration.spell.healingWave": "Healing Wave",
  "shaman.restoration.spell.riptide": "Riptide",
  "shaman.restoration.spell.wellspring": "Wellspring",
  "shaman.restoration.statValues.crit": "Weight does not include Resurgence mana gain.",
  "shaman.restoration.statValues.hpct": "HPCT stands for \"Healing per Cast Time\". This is the max value that Haste would be worth if you would cast everything you are already casting (that scales with Haste) faster. Mana and overhealing are not accounted for in any way.<0/><1/>The real value of Haste (HPCT) will be between 0 and the shown value. It depends on various things, such as if you have the mana left to spend, if the gained casts would overheal, and how well you are at casting spells end-to-end. If you are going OOM before the end of the fight you might instead want to drop some Haste or cast fewer bad heals. If you had mana left-over, Haste could help you convert that into healing. If your Haste usage is optimal Haste will then be worth the shown max value.<2/><3/>Haste can also help you safe lives during intense damage phases. If you notice you're GCD capped when people are dying, Haste might help you land more heals. This may contribute more towards actually getting the kill.",
  "shaman.restoration.suggestions.aoeTargets.averageTargets": "average targets healed",
  "shaman.restoration.suggestions.aoeTargets.label": "Try to always cast <0/> on groups of people, so that it heals all {0} potential targets.",
  "shaman.restoration.suggestions.healingRain.averageTargets": "{0} average targets healed",
  "shaman.restoration.suggestions.healingSurge.unbuffed": "{0}% of unbuffed Healing Surges",
  "shaman.restoration.suggestions.healingWave.unbuffed": "{0}% of unbuffed Healing Waves",
  "shaman.restoration.suggestions.tidalWaves.actual": "{0}% unused Tidal waves",
  "shaman.restoration.suggestions.tidalWaves.label": "<0/> buffed <1/> can make for some very efficient healing, consider casting more of them if you are running into mana issues ({0}% unused Tidal Waves).",
  "shaman.restoration.suggestions.tidalWaves.recommended": "Less than {0}% unused is recommended",
  "shaman.restoration.suggestions.wellSpring.label": "You're not making full use of the potential of <0/>. Try to aim it towards stacks of injured players with 6 people or more.",
  "shaman.restoration.talentBox.title": "Healing Contribution",
  "shaman.restoration.talentBox.tooltip": "The purpose of this is to show the overall HPS impact of each talent. So not only what the talent itself did, but also feeding and synergy or interactions with other spells or talents. The percentage shown is what you'd lose without the talent, ignoring what you'd gain from the other options.<0/><1/><2>Not Supported:</2><3/>Echo of the Elements",
  "shaman.restoration.unleashLife.chart.unused.label": "Unused Buffs",
  "shaman.restoration.unleashLife.chart.unused.label.tooltip": "The amount of Unleash Life buffs you did not use out of the total available. You cast {0} Unleash Lifes, of which you used {1}.",
  "shaman.restoration.unleashLife.statistic.label": "<0/> usage",
  "shaman.restoration.unleashLife.statistic.tooltip": "{0}% from Unleash Life and {1}% from the healing buff.",
  "shaman.restoration.waterShield.statistic.tooltip": "{0} mana from the passive regen and {1} from getting hit",
  "shaman.restoration.wellspring.inefficientCast.reason": "This Wellspring cast hit less than 6 targets.",
  "shaman.restoration.wellspring.statistic.label": "Wellspring target efficiency",
  "shaman.restoration.wellspring.statistic.tooltip": "The average number of targets healed by Wellspring out of the minimum amount of 6 targets to archive the maximum potential healing.",
  "shaman.shared.damageReduced.label": "Estimated damage reduced",
  "shaman.shared.damageReduced.tooltip": "The total estimated damage reduced was {0}.<0/><1/>This is the lowest possible value. This value is pretty accurate for this log if you are looking at the actual gain over not having <2/> bonus at all, but the gain may end up higher when taking interactions with other damage reductions into account.",
  "shaman.shared.earthShield.statistic.tooltip": "{0}% from the HoT and {1}% from the healing increase.",
  "shaman.shared.suggestions.maelstrom.overcapped": "{0}% overcapped Maelstrom",
  "shared.healingEfficiency.title": "Mana Efficiency",
  "shared.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "shared.suggestions.alwaysBeCasting.suggestion": "Your downtime can be improved. Try to Always Be Casting (ABC), avoid delays between casting spells and cast instant spells when you have to move.",
  "shared.suggestions.efficiency": "efficiency",
  "warlock.affliction.suggestions.agony.uptime": "{0}% Agony uptime",
  "warlock.affliction.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.affliction.suggestions.corruption.uptime": "{0}% Corruption uptime",
  "warlock.affliction.suggestions.drainSoul.mobsSniped": "{0} % of mobs sniped.",
  "warlock.affliction.suggestions.haunt.uptime": "{0}% Haunt uptime.",
  "warlock.affliction.suggestions.scouring_tithe.uptime": "{0}% Scouring Tithe uptime",
  "warlock.affliction.suggestions.shadowembrace.uptime": "{0}% Shadow Embrace uptime",
  "warlock.affliction.suggestions.siphonLife.uptime": "{0}% Siphon Life uptime",
  "warlock.affliction.suggestions.soulShards.wastedPerMinute": "{shardsWasted} Soul Shards wasted ({0} per minute)",
  "warlock.affliction.suggestions.unstableAffliction.uptime": "{0}% Unstable Affliction uptime.",
  "warlock.demonology.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.demonology.suggestions.demonicCalling.wastedProcsPerMinute": "{0} wasted procs per minute",
  "warlock.demonology.suggestions.doom.uptime": "{0}% Doom uptime",
  "warlock.demonology.suggestions.felstorm.casts": "{0} out of {1} ({2} %) Felstorm casts.",
  "warlock.demonology.suggestions.legionStrike.casts": "{actual} Legion Strike casts",
  "warlock.demonology.suggestions.soulShards.wastedPerMinutes": "{shardsWasted} Soul Shards wasted ({0} per minute)",
  "warlock.destruction.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.destruction.suggestions.backdraft.wastedPerMinute": "{0} wasted Backdraft stacks per minute",
  "warlock.destruction.suggestions.eradication.uptime": "{0}% Eradication uptime",
  "warlock.destruction.suggestions.immolate.uptime": "{0}% Immolate uptime",
  "warlock.destruction.suggestions.soulShard.wastedPerMinute": "{fragmentsWasted} Soul Shard Fragments wasted ({0} per minute)",
  "warlock.shared.suggestions.grimoireOfSacrifice.uptime": "{0} % Grimoire of Sacrifice uptime.",
  "warrior.arms.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.arms.suggestions.deepWounds.uptime": "{0}% Deep Wounds uptime",
  "warrior.arms.suggestions.defensiveStance": "A total of {0} of your damage has been reduced compared to {1} of the damage from the boss.",
  "warrior.arms.suggestions.execute.rend.casts": "Rend was used {0}% of the time on a target in execute range.",
  "warrior.arms.suggestions.mortalStrike.efficiency": "Mortal Strike was cast {0} times accounting for {1}% of the total possible casts of Mortal Strike during a time a target was in execute range.",
  "warrior.arms.suggestions.motalStrike.outsideExecute": "Mortal Strike was used {0}% of the time on a target outside execute range.",
  "warrior.arms.suggestions.overpower.stacksWasted": "{0}% of Overpower stacks were wasted.",
  "warrior.arms.suggestions.rage.wasted": "{0}% wasted",
  "warrior.arms.suggestions.rend.uptime": "{0}% Rend uptime",
  "warrior.arms.suggestions.slam.efficiency": "Slam was cast {0} times accounting for {1}% of total casts, while Mortal Strike or Execute was available.",
  "warrior.arms.suggestions.sweepingStrikes.efficiency": "Sweeping Strikes was used {0}% of the time shortly after Colossus Smash/Warbreaker.",
  "warrior.fury.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.fury.suggestions.bladestorm.castsEnrage": "{0}% of Bladestorm casts outside of enrage",
  "warrior.fury.suggestions.dragonRoar.efficiency": "{0}% of Bladestorm casts outside of enrage",
  "warrior.fury.suggestions.enrage.uptime": "{0}% Enrage uptime",
  "warrior.fury.suggestions.rage.wasted": "{0}% wasted",
  "warrior.fury.suggestions.rampages.missed": "{actual} missed Rampages.",
  "warrior.fury.suggestions.siegeBreaker.efficiency": "{0}% of Recklessnesses casts without a Siegebreaker cast",
  "warrior.fury.suggestions.whirlwind.badCasts": "{0}% of bad Whirlwind casts",
  "warrior.protection.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.protection.suggestions.block.damageMitigated": "{0}% was mitigated by a block spell",
  "warrior.protection.suggestions.boominVoice.rage.wasted": "{actual} Rage wasted",
  "warrior.protection.suggestions.heavyRepercussions.shieldBlockCasts": "{0}% cast during Shield Block",
  "warrior.protection.suggestions.rage.wasted": "{0}% wasted",
  "warrior.protection.suggestions.shieldBlock.goodCasts": "{0} good casts of shield block",
  "warrior.protection.suggestions.shieldSlam.casts": "{0} shield slam casts",
  "warrior.protection.suggestions.spellReflect.efficiency": "{0} % magic damage With Spell Reflect Up"
}